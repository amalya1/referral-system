version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3030:3000"
    environment:
      - NODE_ENV=development
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - AUTH_SERVICE_HOST=${AUTH_SERVICE_HOST}
      - AUTH_SERVICE_PORT=${AUTH_SERVICE_PORT}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs:rw
    networks:
      - hypetrain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  postgres:
    image: postgres:14-alpine
    ports:
      - "5439:5432"
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - hypetrain-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

networks:
  hypetrain-network:
    driver: bridge
    name: hypetrain-network

volumes:
  postgres_data:
    name: hypetrain-postgres-data
